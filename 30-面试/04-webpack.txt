
问题一: 性能优化，webpack做过哪些优化?
 - 通过配置webpack 做过哪些优化
 
对webpack的理解
 - webpack是用于现代JavaScript应用程序的静态模块打包工具。我们可以使用webpack管理模块。
   因为在webpack看来，项目中所有的资源皆为模块，通过分析模块间的依赖关系，在其内部构建出一个依赖图，
   最终编译输出模块为HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让我们的开发过程更加高效。

webpack的作用主要如下:
 - 模块打包
 - 编译兼容
 - 能力扩展

常见的loader: 
 - 默认情况下，webpack只支持对js和json文件进行打包，像其他css、html、png等文件默认不会进行打包，
   因此需要配置对应的loader进行文件内容的解析转换。
 - image-loader: 加载并且压缩图片文件
 - less-loader: 加载并编译less文件
 - sass-loader: 加载并编译sass文件
 - css-loader: 加载CSS，并支持模块化、压缩、文件导入等特性，使用css-loader必须配合使用style-loader。
 - style-loader: 用于将css编译完成的样式，挂载到页面的style标签上。loader都是从后往前执行。
 - babel-loader: 把ES6转成ES5
 - postcss-loader: 扩展CSS语法，可以配合autoprefixer插件自动补齐CSS3前缀
 - eslint-loader: 通过eslint检查JavaScript代码
 - vue-loader: 加载编译vue组件文件

常见的plugin: 
 - plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境注入等。目的在于解决一些loader无法实现的一些功能。
 - HtmlWebpackPlugin: 简化HTML模板文件创建(index.html入口文件)
 - mini-css-extract-plugin: 分离样式文件，CSS提取为独立文件，支持按需加载
 - clean-webpack-plugin: 目录清理

常见问题: loader和plugin的区别?
 - loader是文件加载器，能够加载各种资源，并且对文件进行压缩、编译等处理，最终一起打包到指定的文件中。
 - plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境注入等。
 - 在运行时机上，loader运行在打包文件之前，plugin是在整个编译周期都有作用。
 - 在配置上loader在module.rules中配置，作为模块的解析规则，内部包含了test类型文件、loader、options参数等。
   plugin在plugins单独配置，类型为数组，每一项都是一个plugin实例。

如何提高webpack构建速度？
 - 代码压缩: 
   js压缩: webpack4.0默认使用terser-webpack-plugin这个插件压缩。
   css压缩: css压缩通常是去除无用的空格，css-minimizer-webpack-plugin。
   HTML压缩: HtmlWebpackPlugin插件生成HTML模版的时候，通过配置minify进行html优化。
 - 图片压缩: image-webpack-loader
 - Tree Shaking: 消除无用的js代码，依赖ESModule的静态语法分析（不执行任何的代码，可以明确的知道模块的依赖关系）
   1. usedExports: 通过标记某些函数是否被使用，之后通过Terser来进行优化的。 
      使用之后，没有用上的代码在webpack打包中会加入unused注释，用来告诉Terser在做优化时，可以删除这段代码。
   2. sideEffects: 跳过整个模块或者文件，查看该文件是否有副作用。如果sideEffects设置为false，
      就是告知webpack可以安全的删除未用到的exports
 - 缩小打包域: 排除webpack不需要解析的模块，借助include和exclude俩个参数，规定loader只在哪些模块应用和只在哪些模块不应用。
 - 减少ES6转为ES5的冗余代码: 通过使用bable-plugin-transform-runtime插件。
 - 提取公共代码: 通过配置CommonsChunkPlugin插件，可以将多个页面的公共代码抽离成单独的文件。

 项目中对webpack进行过哪些配置?
 1、配置本地服务devServer, 包括hot、port、host、proxy代理
 2、配置resolve解析，包括extension解析扩展文件和alias别名，确保模块文件引入变得简单。
 3、配置一些plugins，
    例如htmlWebpackPlugin 简化HTML模版文件创建、
    bable-plugin-transform-runtime 减少ES6转ES5冗余代码、
    CommonsChunkPlugin提取公共代码
 4、module配置对应的一些rules，规则数组中配置对应的loader，
    对项目文件进行编译打包，（image-webpack-loader进行图片压缩，mini-css-extract-plugin 分离样式文件）
 5、Optimization优化配置usedExports 标记哪些内部未被使用，最终打包的时候会删除这部分未使用的内容。还可以配置splitChunks分割模块文件。

 vite为啥很快， 因为vite做编译和打包的时候， 不需要将ES6的代码转成ES5的代码了。